\import Data.Bool
\import Data.Or
\import Logic


-- 1. Определите полиморфный tail для списков.

\import lect02 (List, nil, cons)

\func tail {A : \Type} (a : List A) : List A
  | nil => nil
  | cons a a1 => a1

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func sort {A : \Type} (cmp : A -> A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => helper cmp x (sort cmp xs) \where {
  \func helper (cmp : A -> A -> Bool) (x : A) (xs : List A) : List A \elim xs
    | nil => cons x nil
    | cons a xs => \case cmp x a \with {
      | false => cons a (helper cmp x xs)
      | true => cons x (cons a xs)
    }
}

-- 3. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x and y) and z = x and (y and z) \elim x
  | false => idp
  | true => idp

\func ||-assoc (x y z : Bool) : (x or y) or z = x or (y or z) \elim x
  | false => idp
  | true => idp

-- 4. Докажите, что fac 3 равно 6.

\import hw01 (fac)

\func fac3equals6 : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R

\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R

\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Or P Q) : R \elim h
  | inl a => f a
  | inr b => g b

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R

\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam p q => g p))

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R

\func t4 {P Q R : \Type} (f : P -> Q -> R) (g : \Sigma P Q) : R \elim g
  | (p,q) => f p q

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)

\func t5 {P Q R : \Type} (f : \Sigma (Or P (Q -> P)) Q) : \Sigma (P -> Q) (Q -> P)
  | (o,q) => \case o \with {
    | inl a => (\lam p => q, \lam q => a)
    | inr b => (\lam p => q, \lam q => b q)
  }

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q

\func t6 {P Q : \Type} (f : (((P -> Q) -> P) -> P) -> Q) : Q => f (\lam pqp => pqp (\lam pqp => f (\lam pqp' => pqp)))

-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.

\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (1, h 1)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.

\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam p3 => h (3, p3)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).

\func s3 (P Q : Nat -> \Type) (f : \Pi (x : Nat) -> (P x) -> (Q x)) (x0 : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) \elim x0
  | (x,p) => (x, f x p)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.

\func s4 (P Q : Nat -> \Type) (f : \Pi (x : Nat) -> Or (P x -> Empty) (Q x -> Empty)) : P 3 -> Q 3 -> Empty =>
  \lam p3 => \case f 3 \with {
    | inl a => \lam q3 => a p3
    | inr b => b
  }